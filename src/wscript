# coding: utf-8
from __future__ import division, print_function, absolute_import

APPNAME = 'hts_engine_API'
VERSION = '1.0.9'

import sys
import re
import waflib

subdirs = [
    'lib',
    'bin',
]

top = '.'
out = 'build'


def options(opt):
    opt.load('compiler_c')
    opt.add_option('--enable-embedded', action="store_true", dest="enable_embedded",
                   default=False, help="turn on compiling for embedded devices")
    opt.add_option('--enable-festival', action="store_true", dest="enable_festival",
                   default=False,
                   help="use memory allocation/free functions of speech tools")


def configure(conf):
    conf.check_waf_version(mini='1.7.11')
    conf.load('compiler_c')

    conf.define('HTS_ENGINE_API_VERSION', VERSION)
    conf.env['VERSION'] = VERSION
    conf.env['APPNAME'] = APPNAME

    if re.search('clang', conf.env.CC[0]):
        conf.env.append_unique(
            'CFLAGS',
            ['-O3', '-Wall', '-fno-common', '-Wstrict-prototypes'])
    elif re.search('gcc', conf.env.CC[0]):
        conf.env.append_unique(
            'CFLAGS',
            ['-O2', '-Wall', '-fno-common', '-Wstrict-prototypes'])
    elif re.search('cl.exe', conf.env.CC[0].lower()):
        conf.env.append_unique('CFLAGS', [''])
    else:
        raise RuntimeError("Not supported compiler: %s" % conf.env.CC[0])

    # Optional
    if conf.options.enable_embedded:
        conf.env.append_unique('CFLAGS', ['-DHTS_EMBEDDED'])
    if conf.options.enable_festival:
        conf.env.append_unique('CFLAGS', ['-DFESTIVAL'])

    conf.env.HPREFIX = conf.env.PREFIX + '/include'

    if conf.env.COMPILER_CXX != 'msvc':
        conf.env.append_unique('CXXFLAGS', ['-O2', '-Wall'])

    conf.check_cc(header_name="stdlib.h")
    conf.check_cc(header_name="string.h")

    conf.recurse(subdirs)

    print("""
hts_engine_API has been configured as follows:

[Build information]
Package:                 {0}
build (compile on):      {1}
host endian:             {2}
Compiler:                {3}
Compiler version:        {4}
CFLAGS:                  {5}
""".format(
        APPNAME + '-' + VERSION,
        conf.env.DEST_CPU + '-' + conf.env.DEST_OS,
        sys.byteorder,
        conf.env.COMPILER_CC,
        '.'.join(conf.env.CC_VERSION),
        ' '.join(conf.env.CFLAGS)
    ))

    conf.write_config_header('src/hts_engine_API-config.h')


def build(bld):
    bld.recurse(subdirs)

    libs = []
    for tasks in bld.get_build_iterator():
        if tasks == []:
            break
        for task in tasks:
            if isinstance(task.generator, waflib.TaskGen.task_gen) and 'cxxshlib' in task.generator.features:
                libs.append(task.generator.target)
    ls = ''
    for l in set(libs):
        ls = ls + ' -l' + l

    print(bld.env.CC[0])
    if not re.search('CL.exe', bld.env.CC[0]):
        ls += ' -lm'

    bld(source='hts_engine_API.pc.in',
        prefix=bld.env['PREFIX'],
        exec_prefix='${prefix}',
        libdir=bld.env['LIBDIR'],
        libs=ls,
        includedir='${prefix}/include',
        PACKAGE=APPNAME,
        VERSION=VERSION)
